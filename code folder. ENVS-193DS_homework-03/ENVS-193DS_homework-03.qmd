---
title: "ENVS-193DS_homework-03"
format: html
editor: visual
---

https://github.com/emilyl-2324/ENVS-193DS_homework-03.git

```{r}
library(tidyverse)
library(here)
library(gt)
library(janitor)
library(readxl)
```

# Problem 1:

## a. Data summarizing (5 points)

In 1-2 sentences, describe how you could summarize your data to compare your response variable between categories or groups of your choosing. For example, are you counting observations and comparing counts between groups? Are you taking the mean and comparing means between groups? Are you finding the maximum, minimum, range? Are you adding numbers together?

Be sure to describe why comparing between the groups you chose is informative. For example, you might calculate the mean number of steps you take to compare between week days, but what about those weekdays is different (e.g. “I could calculate the mean number of steps I took to compare average step count between weekdays because I have more classes on Monday than on any other day of the week, so I think I walk more on Monday.”)

I could calculate the mean listening time for each mood level, since on days where I'm more stressed, it could be correlated with more studying and I usually listen to music while studying. I could calculate the mean mood levels for days where I receive less than 7 hours of sleep and for days where I receive 7 or more hours of sleep since I think I will have lower mood levels on days where I receive relatively less sleep.

## b. Visualization (10 points):

Using the summary you described in part a, create a visualization of your data comparing your summarized response variable between groups. If you are calculating a mean or median, show the underlying data in addition to your summary.

Use colors in your figure (that are not the default ggplot settings).

Make sure your axis labels are full, readable text (not just your column names).

```{r}
library(janitor)
datasheet <- read_csv("envs193dsmusicdata.csv")

cleandata <- datasheet |> #storing clean df as an object "cleandata"
  clean_names() |> #clean column names 
  mutate(mood_level = case_when(
    mood_level == 2 ~ "bad",
    mood_level == 3 ~ "average",
    mood_level == 4 ~ "good")) |> 
  mutate(mood_level = factor(mood_level, levels = c("bad", "average", "good"))) |> # set order here
  mutate(caffeine = replace_na(caffeine, "no")) #replace NA with "no" in caffeine column



ggplot(data = cleandata, #using the cleandata dataframe 
       aes(x = mood_level, #plots mood levels on the x-axis and listening time on the y-axis 
           y = spotify_time,  
           color = mood_level)) + #assigning color of the data based on mood 
  geom_boxplot(width = 0.4) + # first layer should be a boxplot 
  geom_jitter(size = 1.9,
              width = 0.1, # making the points jitter horizontally 
              height = 0) + # making sure points don't jitter vertically 
  labs( #add titles
        x = "mood level", 
        y = "spotify listening time (min)",
        title = "spotify listening time vs. mood") + 
  scale_color_manual( #assign colors to each mood_level
            values = c( "bad" = "red",
                        "average" = "orange",
                        "good" = "darkgreen")
                    ) +
  theme(legend.position = "none") # getting rid of the legend

```

```{r}
#create a plot showing caffeine consumption (yes/no) on x-axis and listening time (min) on y-axis 
ggplot(data = cleandata,
       aes(x = caffeine, 
           y = spotify_time, 
           color = caffeine)) +
  geom_boxplot(width = 0.4) + 
  geom_jitter(size = 1.9, 
              width = 0.1, 
              height = 0) +
  labs(x = "caffeine consumed",
       y = "spotify listening time (min)",
       title = "spotify listening time on days with/without caffeine") +
  theme(legend.position = "none")
```

```{r}
#create a scatterplot with screen time (min) on x-axis and spotify listening time (min) on y-axis
ggplot(data = cleandata, 
       aes(x = total_screen_time,
           y = spotify_time)) +
  geom_jitter(size = 1.7,
              width = 0.1) + 
  labs(x = "screen time",
       y = "spotify listening time",
       title = "spotify listening time and screen time")
  
```

```{r}
#create a scatterplot with mood on x-axis and screen time on y-axix 
ggplot(data = cleandata, #using the cleandata dataframe 
       aes(x = mood_level, #plots mood levels on the x-axis and listening time on the y-axis 
           y = total_screen_time,  
           color = mood_level)) + #assigning color of the data based on mood 
  geom_boxplot(width = 0.4) + # first layer should be a boxplot 
  geom_jitter(size = 1.9,
              width = 0.1, # making the points jitter horizontally 
              height = 0) + # making sure points don't jitter vertically 
  labs( #add titles
        x = "mood level", 
        y = "daily screen time (min)",
        title = "daily screen time vs. mood") + 
  scale_color_manual( #assign colors to each mood_level
            values = c( "bad" = "red",
                        "average" = "magenta",
                        "good" = "purple")
                    ) +
  theme(legend.position = "none") # getting rid of the legend
```

```{r}
#create a plot showing mood levels on days with greater than 7 hours of sleep vs. days with less than 7 hours of sleep; create table with >7 and <7, mean mood levels, and n. 
# Load necessary libraries

# Read and clean data
datasheet <- read_csv("envs193dsmusicdata.csv")

library(gt) 
cleansleep_summary <- cleandata |> 
  clean_names() |> 
  filter(sleep > 0) |> 
    group_by(mood_level) |> 
    summarize(mean_sleep = mean(sleep),
              n = length(sleep)
              ) |> 
    mutate(#round each value to 1 decimal
      mean_sleep = round(mean_sleep, 1)
      ) |> 
    select(mood_level, mean_sleep, n)

ggplot(data = cleansleep_summary,
       aes(x = mean_sleep,
           y = mood_level)) +
  geom_col(data = cleansleep_summary,
           aes(x = mean_sleep,
               y = mood_level,
               fill = mood_level),
           width = 0.5,
           alpha = 0.5)+


  

```
 geom_col(data = tussocks_summary,  
           aes(x = site, 
               y = mean,  
               fill = site), #fill bar by site 
           width = 0.5,  #change width  
           color = "black",#border color  
           alpha = 0.5, #transparency 
)

# create a new object called `jtnp`
jtnp <- parks_visits |> # start with the `parks_visits` data frame
  filter(park == "jtnp") |> # filter to only include Joshua tree
  summarize(mean_visits = mean(visits)) # calculate the mean number of visits at Joshua Tree

goodsleep <- cleansleep
  filter(sleep >= 7)
  summarize(mean_goodsleep = mean(sleep))

poorsleep <- cleansleep
  filter(sleep < 7)
  summarize(mean_badsleep = mean(sleep))


tussocks_summary <- tussocks_clean |> #creating a new object using df 
tussocks_clean 
  group_by(site) |> #groups the table by predictor variable 
  summarize(mean = mean(average_moss_cm), #find mean  
            n = length(average_moss_cm), #find sample size 
            df = n - 1, #find degrees of freedom  
            sd = sd(average_moss_cm), #find standard deviation 
            se = sd/sqrt(n), #find standard error 
            tval = qt(p = 0.05/2, df = df, lower.tail = FALSE), #find t-value 
            ci_lower = mean - tval*se, #find lower confidence interval bound 
            ci_higher = mean + tval*se #find upper confidence interval bound 
            ) |>  
  mutate( #rounding each value to 1 decimal point 
      mean = round(mean, 1), 
      sd = round(sd, 1), 
      se = round(se, 1), 
      ci_lower = round(ci_lower, 1), 
      ci_higher = round(ci_higher, 1) 
        ) |>  
  select(site, mean, sd, se, ci_lower, ci_higher)  #selecting stats to 
display 

```{r}
#create a plot showing spotify listening time vs sleep (>7 and <7 on x-axis, listening time on y-axis)

library(dplyr)
music_sleep <- cleansleep |>
  clean_names() |> 
  mutate(sleep = case_when(
    sleep < 7 ~ "less than 7 hours",
    sleep >= 7 ~ "7 hours or more"
  ))

ggplot(data = music_sleep,
       aes(x = sleep,
           y = spotify_time,
           color = sleep)) +
  geom_boxplot(width = 0.4,
               alpha = 0.5) + # first layer should be a boxplot 
  geom_jitter(size = 1.9,
              width = 0.1, # making the points jitter horizontally 
              height = 0) + # making sure points don't jitter vertically 
  labs( #add titles
        x = "sleep", 
        y = "listening time (min)",
        title = "sleep vs listening time (min)")+
  theme_minimal()+ 
  theme(legend.position = "none")




```


# c. Caption (5 points):

Write a caption for your figure.

d.  Table presentation (10 points) Using gt or flextable, create a table with the same data summary that you describe in part a and visualized in part b. For example, if you described and visualized means, make a table with means. If you need to, round any numbers to one decimal point.
